alias w 'save'
alias q 'quit'
alias q! 'quit -f'
alias wq 'save; quit'

# Show current mode in the statusline (%i)
set statusline-left ' %i%S%f%s%m%s%r%s%M'

# Create a "fallthrough" mode, to contain bindings shared by multiple
# other modes (roughly corresponding to vim's `:map`)
# See also: https://dev.to/iggredible/basic-vim-mapping-5ahj#different-mode-mapping
def-mode -u vi-move

# Create `vi-normal` mode, with text insertion for normal keys disabled
# (-u) and using the fallthrough mode from above for keys not bound in
# the top-level mode
def-mode -u vi-normal vi-move

# Go into "vi-normal" mode at startup
mode vi-normal

# Create another fallthrough mode, with a single key binding (makes Esc
# switch back to vi-normal mode)
def-mode -u vi-esc
bind -T vi-esc ^[ 'mode vi-normal'

# Create "vi-insert" mode, which "falls through" to dte's built-in "normal"
# mode for unbound keys (note: the ability to remove/rename built-in modes
# will be implemented eventually, to avoid confusion with e.g. "normal" vs
# "vi-normal")
def-mode vi-insert vi-esc normal

# Create some aliases for setting up bindings, to minimize verbosity below
alias map 'bind -T vi-move'
alias nmap 'bind -T vi-normal'
alias xmap 'bind -T vi-visual'

map ^[ 'unselect; mode vi-normal'
map left left
map right right
map up up
map down down
map home bol
map end eol
map pgup pgup
map pgdown pgdown
map C-left 'word-bwd -s'
map C-right 'word-fwd -s'
map C-up up
map C-down down
map M-left bol
map M-right eol
map M-up pgup
map M-down pgdown
map b word-bwd
map e word-fwd
map h left
map j down
map k up
map l right
map G eof
map 0 bol
map { blkup
map } blkdown
map % match-bracket
map C-b pgup
map \$ eol
map | bol
map ^ 'bol; bol -t'
map _ 'bol; bol -t'
map - 'up; bol; bol -t'
map + 'down; bol; bol -t'
map enter 'down; bol; bol -t'
map space right
map C-? left
map C-d 'scroll-pgdown -h'
map C-e scroll-down
map C-f pgdown
map C-h left
map C-j down
map C-l refresh
map C-m 'down; bol; bol -t'
map C-n down
map C-p up
map C-u 'scroll-pgup -h'
map C-y scroll-up

# TODO: Move the subset of these commands allowed in visual mode to a
# separate fallthrough mode, which should be something like the `vi-move`
# mode but with `; mode vi-normal` after every command. Eventually another,
# built-in mechanism should be added to allow switching modes automatically
# (after a binding is found and executed).
nmap delete delete
nmap a 'right; mode vi-insert'
nmap g 'mode vi-normal-goto'
nmap i 'mode vi-insert'
# TODO: Make the `search` command keep (and extend) the selection while in
# (dte's) `select` mode (like vim's visual mode does)
nmap n 'search -n'
nmap o 'new-line; mode vi-insert'
nmap p paste
nmap s 'delete; mode vi-insert'
nmap u undo
nmap v 'select; mode vi-visual'
nmap w 'word-fwd -s'
nmap x delete
nmap A 'eol; mode vi-insert'
nmap C 'delete-eol; mode vi-insert'
nmap D delete-eol
nmap I 'bol; bol -t; mode vi-insert'
nmap J join
nmap N 'search -p'
nmap O 'new-line -a; mode vi-insert'
nmap P 'paste -a'
nmap S 'clear; mode vi-insert'
# TODO: Does this actually correspond to what vi does?
#nmap U redo
nmap V 'select -l; mode vi-visual-line'
nmap X erase
nmap Y copy
# TODO: What does this key do in vim, in visual mode?
nmap : 'mode command'
nmap / search
nmap ? 'search -r'
nmap > 'shift 1'
nmap < 'shift -- -1'
nmap ~ case
nmap C-] tag
nmap C-t 'tag -r'
nmap C-z suspend

def-mode -u vi-visual vi-move
def-mode -u vi-visual-line vi-visual
xmap y 'copy; mode vi-normal'
xmap d 'erase; mode vi-normal'

def-mode -u vi-normal-goto vi-esc
alias ngmap 'bind -T vi-normal-goto'
ngmap t 'next; mode vi-normal'
ngmap T 'prev; mode vi-normal'

# The above bindings were "adapted" (subject to my ignorance of vi) from
# the list at https://hea-www.harvard.edu/~fine/Tech/vi.html. Most of the
# remainder are listed below, except for a small handful of removed items
# (deemed not useful or out of scope).
#
# Possible improvements (to the editor, to emulate some vi-isms):
#
# * Flags for movement commands, to stop e.g. `eol; right -X` from moving
#   beyond the end of the line.
# * Support for colorizing the status line, to make the mode indicator more
#   prominent (among other uses).
# * The ability to rename or remove modes, e.g. the default "normal" mode
#   (taking care not to allow "dangling" fallthrough modes).
# * Allow binding "unmodified" keys, even when `insert_text_for_unicode_range`
#   is set to `true`. If a binding has been explicitly added for a key that would
#   otherwise insert text, it can't really have been done by accident and should
#   probably be respected.
# * Extend `cursor` command to allow configuring cursor styles for custom modes.

# TODO: Implement these:
# ------------------------------------------------------------------------------
# f   find character after cursor in current line   (character to find)
# F   backwards version of "f"   (character to find)
# t   same as "f" but cursor moves to just before found character   (character to find)
# T   backwards version of "t"   (character to find)
# ;   repeat last "f", "F", "t", or "T" command
# ,   reverse direction of last "f", "F", "t", or "T" command
# r   replace single character at cursor   (replacement character expected)
# E   move to end of Word
# W   foreward Word
# H   home cursor - goto first line on screen
# L   goto last line on screen
# M   goto middle line on screen

# Implementing repeat counts may be on the table, but it will require specific
# support in the editor beyond just custom keymaps.
# TODO: Consider implementing separately, at a later time:
# ------------------------------------------------------------------------------
# 1-9 numeric precursor to other commands   ([additional numbers (0-9)] command)
# G   goto line number prefixed, or goto end if none

# TODO: Decide what to do with these
# ------------------------------------------------------------------------------
# c   change command   (cursor motion command)
# d   delete command   (cursor motion command)
# m   mark current line and position   (mark character tag (a-z))
# y   yank command   (cursor motion command)
# z   position current line   (CR = top; "." = center; "-"=bottom)
# B   move back one Word  (N.B.: "word" and "Word" are two different things in vi)
# R   replace mode - replaces through end of current line, then inserts   (text, ESC)
# U   restores line to state when cursor was moved into it
# !   shell command filter   (cursor motion command, shell command)
# @   vi eval   (buffer name (a-z))
# (   move to previous sentence
# )   move to next sentence
# [   move to previous "{...}" section   ("[")
# ]   move to next "{...}" section   ("]")
# '   move to marked line, first non-whitespace   (character tag (a-z))
# `   move to marked line, memorized column   (character tag (a-z))
# "   access numbered buffer; load or access lettered buffer   (1-9,a-z)
# .   repeat last text-changing command
# ^^  switch file buffers
