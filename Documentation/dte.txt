@title DTE 1 "July 2017"

@h1 NAME

dte

@h1 SYNOPSIS

dte [-RV] [-c command] [-t tag] [-r rcfile] [[+line] file]...

@h1 DESCRIPTION

A small and flexible text editor.

@h1 COMMAND LINE OPTIONS

-c command
	Run this command after reading the rc file and opening any files
	specified on command line.

-r rcfile
	Read this rc file instead of $DTE_HOME/rc.

-t tag
	Go to tag. Requires tags file generated by Exuberant Ctags.

-R
	Don't read the rc file.

-V
	Display the version number and exit.

+line
	Go to line.

@h1 BASIC USAGE

Here's some of the default key bindings. *M-x* means Alt+x and
*^V* is Ctrl+v.

	@li M-s
	select
	@li M-l
	select lines
	@li ^C
	copy current line or selection
	@li ^X
	cut current line or selection
	@li ^V
	paste
	@li ^Z
	undo
	@li ^Y
	redo
	@li M-x
	enter command line
	@li ^F
	search
	@li F3
	search next
	@li F4
	search previous
	@li ^T
	Open new tab
	@li M-`N`
	activate `N`th tab
	@li ^W
	Close tab
	@li ^S
	Save file
	@li ^Q
	Quit

On the command line you can use tab to complete commands and most of
their parameters. Run *next* or *prev* to switch to next or previous
file. The commands *open*, *save* and *quit* should be obvious.

@h1 COMMANDS

alias <name> <command>
	Create an alias to command.

	Example:
		alias read "pass-through cat"

	Now you can run "read file.txt" to insert file.txt to current
	file.

bind <key> [command]
	Bind a key to command. If command is not given then binding for
	the key is removed.

	Keys:
		insert delete home end pgup pgdown left right up down F1
		F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 enter tab space (or sp)

	Modifiers:
		ctrl: C-X or ^X

		meta/alt: M-X

		shift: S-left

	Key chains are supported. For example "^X c" (press ^X and then c).
	Keys are separated by spaces.

bof
	Move to beginning of file.

bol
	Move to beginning of line.

bolsf
	Incrementally move cursor to beginning of *l*ine, then beginning
	of *s*creen, then beginning of *f*ile.

case [-lu]
	Change text case. Default is to change lower case to upper and
	vice versa.

	-l lower case

	-u upper case

cd <directory>
	Change directory. Updates $PWD and $OLDPWD. "cd -" changes to
	previous directory ($OLDPWD).

center-view
	Center view to cursor.

clear
	Clear current line.

close [-fqw]
	Close file.

	-f close file even if it hasn't been saved after last modification

	-q quit if closing the last open file

	-w close parent window if closing its last contained file

command [text]
	Enter command line. If text is given then it is written to the
	command line (see the default binding *^L* why this is useful).

compile [-1ps] <errorfmt> <command> [parameters]...
	Run external command and collect error messages. This can be
	used to run `make` and `grep`.

	-1 read error messages from stdout instead of stderr

	-p display "Press any key to continue" prompt

	-s silent. both stderr and stdout are redirected to /dev/null

	See also *errorfmt* and *msg* commands.

copy
	Copy current line or selection.

cut
	Cut current line or selection.

delete
	Delete character or selection.

delete-eol [-n]
	Delete to end of line.

	-n delete newline if cursor is at end of line

delete-word [-s]
	Delete word after cursor.

	-s be more "aggressive"

down
	Move cursor down.

eof
	Move cursor to end of file.

eol
	Move cursor to end of line.

eolsf
	Incrementally move cursor to end of *l*ine, then end of
	*s*creen, then end of *f*ile.

erase
	Erase character before cursor.

erase-bol
	Erase to beginning of line.

erase-word [-s]
	Erase word before cursor.

	-s be more "aggressive"

errorfmt [-i] <compiler> <regexp> [file|line|column|message]...

	-i ignore this error

	See *compile* and *msg* commands for more information.

filter <command> [parameter]...
	Filter selected text or whole file through external command.

	Example: filter sort -r

format-paragraph [width]
	Format the paragraph cursor is located on or selection. If
	paragraph width is not given then the *text-width* option is
	used.

	This command merges selection into one paragraph. To format
	multiple paragraphs use the external command `fmt` with *filter*
	command. E.g. *filter fmt -w 60*.

ft <filetype> <extension>...
	Add extensions for filetype.

ft -c <filetype> <regexp>...
	Detect filetype by matching the regexp against first line of
	file.

ft -f <filetype> <regexp>...
	Detect filetype by matching the regexp against filename.

ft -i <filetype> <interpreter>...
	Connect interpreters to file type. Interpreter is parsed
	from the #! line in many scripts.

git-open
	Interactive file opener. Lists all files in GIT repository.

	Same keys work as in command mode, but with these changes:

	@li up
	Move up in file list.
	@li down
	Move down in file list.
	@li enter
	Open file.
	@li ^O
	Open file but don't close git-open.
	@li M-e
	Go to end of file list.
	@li M-t
	Go to top of file list.

hi <name> [fg-color [bg-color]] [attribute]...
	Set highlight color.

	Colors:
		keep (-2) default (-1) black (0) red green yellow blue
		magenta cyan gray darkgray lightred lightgreen lightyellow
		lightblue lightmagenta lightcyan white

	Color can be given as a numeric value too (-2..255).

	Colors 16-255 are supported by modern xterm compatible terminal
	emulators. There's a 6x6x6 color cube at indexes 16..231. For
	these colors it is easiest to use the R/G/B syntax where R, G
	and B are values between 0 and 5.

	Indexes 232..255 contain 24 grayscale values that can be used
	to specify grayscale value more accurately than using the R/G/B
	syntax.

	Attributes:
		bold lowintensity italic underline blink reverse invisible keep

	The color and attribute value "keep" is useful in selected text
	to keep fg-color and attributes and change only bg-color.

	NOTE: Because "keep" is both color and attribute you need to
	specify both fg-color and bg-color if you want to set the "keep"
	attribute.

	If you omit any color it is set to default (-1).

	Unset fg/bg colors are inherited from highlight color "default".
	If you don't set fg/bg for the highlight color "default" then
	terminal's default fg/bg is used.

include <filename>
	Read commands from file.

insert [-km] <text>
	Insert text.

	-k insert one character at a time as if it has been typed

	-m move after inserted text

insert-special
	Insert special character.

	Insert control character,
	type decimal value of byte to insert or press
	*o* to insert octal byte value,
	*x* to insert hexadecimal byte value or
	*u* to insert hexadecimal unicode value.

join
	Join selection or next line to current.

left
	Move left.

line <number>
	Go to line.

load-syntax <filename|filetype>
	If argument contains / it is considered a filename.

move-tab <position|left|right>
	Move current tab to numeric position, left or right.

msg [-np]
	Show latest, next (-n) or previous (-p) message. If its location
	is known (compile error or tag message) then the file will be
	opened and cursor moved to the location.

	-n next message

	-p previous message

	See also *compile* and *tag* commands.

new-line
	Insert empty line under current line.

next
	Display next file.

open [-e encoding] [file]...
	Open files. If filename is omitted a new file is opened.

	-e encoding
		Set file encoding. See "iconv -l" for list of supported
		encodings.

option <filetype> <option> <value>...
	Add automatic options for a filetype. Options are automatically
	set when file is opened.

option [-r] <regexp> <option> <value>...
	Add automatic options for filenames matching regexp.

pass-through [-ms] <command> [parameter]...
	Run command and insert its output.

	-m move after the inserted text

	-s strip newline from end of the command output

paste
	Paste.

	-c paste at the cursor position

pgdown
	Move cursor page down. See also *scroll-pgdown*.

pgup
	Move cursor page up. See also *scroll-pgup*.

prev
	Display previous file.

quit [-f]
	Quit.

	-f force quitting even if there are unsaved files

redo [choice]
	Redo given or latest undid change. If there are multiple
	possibilities an informative message is displayed:

		Redoing newest (2) of 2 possible changes.

	If the change was not the one you wanted, just run *undo* and
	then, for example, *redo 1*.

repeat <count> <command> [parameters]...
	Run command multiple times.

replace [-bcgi] <pattern> <replacement>

	-b use basic instead of extended regular expression syntax

	-c display confirmation before each replace

	-g replace all matching text from a line

	-i ignore case

right
	Move right.

run [-ps] <command> [parameters]...
	Run external command.

	-p display "Press any key to continue" prompt

	-s silent. both stderr and stdout are redirected to /dev/null

save [-dfup] [-e encoding] [filename]
	Save file. By default line-endings (LF vs CRLF) are preserved.

	-d save with DOS/CRLF line-endings

	-f force saving read-only file

	-u save with Unix/LF line-endings

	-p
		if no filename is specified and the buffer has no existing
		filename, open the command line to allow one to be typed,
		instead of showing the "no filename" error message.

	-e encoding
		Set file encoding. See "iconv -l" for list of supported
		encodings.

scroll-down
	Scroll view down one line. Keeps cursor position unchanged if
	possible.

scroll-pgdown
	Scroll page down. Cursor's position relative to top of screen is
	maintained. See also *pgdown*.

scroll-pgup
	Scroll page up. Cursor's position relative to top of screen is
	maintained. See also *pgup*.

scroll-up
	Scroll view up one line. Keeps cursor position unchanged if
	possible.

search [-Hnprw] [pattern]
	If no flags or just -r and no pattern given then dte changes
	to search mode where you can type a regular expression to
	search.

	-H don't add search pattern to history (meaningful only with the
	search pattern given as argument)

	-n search next

	-p search previous

	-r start searching backwards

	-w search word under cursor

select [-bkl]
	Start selecting.

	-b select code block starting from { and ending to }

	-k keep existing selections

	-l select whole lines

set [-gl] <option1> [value1] ...
	Set option value. Value can be omitted for boolean option to set
	it true. Multiple options can be set at once but then value must
	be given for every option.

	There are three kinds of options.

	@li 1. Global options

	@li 2. Local options
		These are file specific options. Each open file has its
		own copies of the option values.

	@li 3. Options that have both global and local values
		Global value is just a default local value for opened
		files and never used for anything else. Changing global
		value does not affect any already opened files.

		By default *set* changes both global and local values.

		-g change only global option value

		-l change only local option value of current file

	In configuration files only global options can be set (no need
	to specify the -g flag).

	To change option for specific filetypes and filenames use the
	*option* command.

setenv <name> <value>
	Set environment variable.

shift <count>
	Shift current or selected lines <count> indentation levels.
	Count is usually -1 (decrease indent) or 1 (increase indent).

	To specify a negative number, it's necessary to first disable
	option parsing with "--", e.g. "shift -- -1".

suspend
	Suspend program.

tag [-r] [tag]
	Save current location to stack and go to the location of tag.
	Requires tags file generated by Exuberant Ctags. If no tag is
	given then word under cursor is used as a tag instead.

	-r return back

	Tag files are searched from current working directory and its
	parent directories.

	See also *msg* command.

toggle [-gv] <option> [value...]
	Toggle option. If list of values is not given then the option
	must be either boolean or enum.

	-g toggle global option instead of local

	-v display new value

	If option has both local and global value then local is toggled
	unless -g is given.

undo
	Undo latest change.

unselect
	Unselect.

up
	Move cursor up.

view <N|last>
	Display Nth or last open file.

wclose [-f]
	Close window.

	-f close even if there are unsaved files in the window

wflip
	Change from vertical layout to horizontal and vice versa.

wnext
	Next window.

word-bwd [-s]
	Move cursor backward one word.

	-s skip special characters

word-fwd [-s]
	Move cursor forward one word.

	-s skip special characters

wprev
	Previous window.

wresize [-hv] [N|+N|-- -N]
	If no parameter given, equalize window sizes in current frame.

	-h resize horizontally

	-v resize vertically

	N Set size of current window to N characters.

	+N Increase size of current window by N characters.

	-N Decrease size of current window by N characters
	(prefixed with *--* to stop option parsing).

wsplit [-bhr] [file...]
	Like *open* but at first splits current window vertically.

	-b Add new window before current instead of after.

	-h Split horizontally instead of vertically.

	-r Split root instead of current window.

wswap
	Swap positions of this and next frame.

@h1 OPTIONS

Options can be changed using the *set* command. Enumerated option values
can also be *toggle*d. To see which options are enumerated type "toggle "
on command line and press tab. You can also use the *option* command
to set filetype/filename specific options.

@h2 Local and global options

Global values of these options serve as default values for local
(per-file) options.

auto-indent [true]
	Automatically insert indentation when pressing enter.
	Indentation is copied from previous non-empty line. If also the
	*indent-regex* local option is set then indentation is
	automatically increased if the regular expression matches
	current line.

detect-indent [""]
	Comma separated list of indent widths (1-8) to detect
	automatically when file is opened. Set to "" to disable. Tab
	indentation is detected if the value is not "". Adjusts
	following options if indentation style is detected:
	*emulate-tab*, *expand-tab*, *indent-width*.

	Example:
		set detect-indent 2,3,4,8

emulate-tab [false]
	Make *delete*, *erase* and moving *left* and *right* inside
	indentation feel as if there were tabs instead of spaces.

expand-tab [false]
	Convert tab to spaces on insert.

file-history [true]
	Save line and column for each file to $DTE_HOME/file-history.

indent-width [8]
	Size of indentation in spaces.

syntax [true]
	Use syntax highlighting.

tab-width [8]
	Width of tab. Recommended value is 8. If you use other
	indentation size than 8 you should use spaces to indent.

text-width [72]
	Preferred with of text. Used as default value for
	*format-paragraph*.

ws-error [special]
	Comma separated list of flags that describe what whitespace
	errors should be highlighted. Set to "" to disable.

	auto-indent
		If expand-tab is true then same as
		`tab-after-indent,tab-indent` otherwise same as
		`space-indent`.

	space-align
		Display spaces used as alignment after tabs in
		indentation as error.

	space-indent
		Display spaces in indentation as error. Note that this
		still allows using less than `tab-width` spaces at end
		of indentation for alignment.

	tab-after-indent
		Display tabs used anywhere else but indentation as
		errors.

	tab-indent
		Display tabs in indentation as errors. If you set this
		you most likely want to set `tab-after-indent` too.

	special
		Display all characters that look like regular space as
		errors. One of these characters is no-break space
		(U+00A0), which is often accidentally typed (AltGr+space
		in some keyboard layouts).

	trailing
		Display trailing whitespace as error.

@h2 Local only options

brace-indent [false]
	Scan for { and } when calculating indentation size. Depends on
	the *auto-indent* option.

filetype [none]
	Type of file. Value must be previously registered using the *ft*
	command.

indent-regex [""]
	If this regular expression matches current line when enter is
	pressed and *auto-indent* is true then indentation is increased.
	Set to "" to disable.

@h2 Global only options

case-sensitive-search [true]
	false
		Search is case-insensitive.
	true
		Search is case-sensitive.
	auto
		If search string contains a uppercase letter search is
		case-sensitive, otherwise it is case-insensitive.

display-special [false]
	Display special characters.

esc-timeout [100] 0...2000
	When single escape is read from the terminal dte waits some
	time before treating the escape as a single keypress. The
	timeout value is in milliseconds.

	Too long timeout makes escape key feel slow and too small
	timeout can cause escape sequences of for example arrow keys to
	be split and treated as multiple key presses.

lock-files [true]
	Lock files using $DTE_HOME/file-locks. Only protects from your
	own mistakes (two processes editing same file).

newline [unix]
	Whether to use LF (`unix`) or CRLF (`dos`) line-endings. This is
	just a default value for new files.

scroll-margin [0]
	Minimum number of lines to keep visible before and after cursor.

show-line-numbers [false]
	Show line numbers.

statusline-left [" %f%s%m%r%s%M"]
	Format string for the left aligned part of status line.

	@li %f
	Filename.

	@li %m
	"\*" if file is has been modified since last save.

	@li %r
	"RO" if file is read-only.

	@li %y
	Cursor row.

	@li %Y
	Total rows in file.

	@li %x
	Cursor display column.

	@li %X
	Cursor column as characters. If it differs from cursor
	display column it is show too (e.g. "2-9").

	@li %p
	Position in percentage.

	@li %E
	File encoding.

	@li %M
	Miscellaneous status information.

	@li %n
	Line-ending (LF or CRLF).

	@li %s
	Add separator.

	@li %t
	File type.

	@li %u
	Hexadecimal unicode value value of character under cursor.

	@li %%
	Literal %.

statusline-right [" %y,%X   %u   %E %n %t   %p "]
	Format string for the right aligned part of status line.

tab-bar [horizontal]
	hidden
		Hide tab bar.
	horizontal
		Show tab bar on top.
	vertical
		Show tab bar on left if there's enough space, hide otherwise.
	auto
		Show tab bar on left if there's enough space, on top otherwise.

tab-bar-max-components [0]
	Maximum number of path components displayed in vertical tab bar.
	Set to 0 to disable.

tab-bar-width [25]
	Width of vertical tab bar. Note that width of tab bar is
	automatically reduced to keep editing area at least 80
	characters wide. Vertical tab bar is shown only if there's
	enough space.

@h1 COMMAND SYNTAX

Command syntax is similar to shell but simpler.

Commands are separated either by newline or ";" character. To make a
command span multiple lines in a rc file escape the newline (put \\ at end
of line).

Rc files can contain comments at beginning of line. Comment begins with
# character and can be indented, but you can't put comment on same line
with a command. This decision was made to make it possible to include #
in commands without escaping.

Commands can contain environment variables. Variables always expand into
a single argument even if they contain whitespace. Variables inside
single or double quotes are NOT expanded. This makes it possible to bind
keys to commands that contain variables (inside single or double
quotes), which will be expanded just before the command is executed.

Example:
	alias x "run chmod 755 $FILE"

$FILE is expanded when the alias x is executed. The command works even
if $FILE contains whitespace.

@h2 Special variables

These are always defined and override environment variables of same
name.

$FILE
	Current file. Empty string if there's no filename.
$WORD
	Selected text or word under cursor. Empty string if there's no
	selection and cursor is not on a word.

@h2 Single quoted strings

Can't contain single quote, no escaping possible.

@h2 Double quoted strings
@li \\a
Bell
@li \\b
Backspace
@li \\t
Horizontal tab
@li \\n
New line
@li \\v
Vertical tab
@li \\f
Form feed
@li \\r
Carriage return
@li \\\\
Literal \\
@li \\x0a
Hexadecimal byte value 0x0a. Note that 0x00 is not supported because
strings are NUL-terminated.
@li \\u20ac
Four hex digit unicode code point U+20AC.
@li \\U000020ac
Eight hex digit unicode code point U+20AC.

@h1 COMMAND LINE

In command line you can use up and down arrows to browse command history
and tab to complete commands and most of their arguments.

Here's list of key bindings (totally obvious keys left out):

@li ^A
Go to beginning of command line.
@li ^B
Move left.
@li ^C
Leave command line.
@li ^D
Delete.
@li ^E
Go to end of command line.
@li ^F
Move right.
@li ^K
Delete to end of command line.
@li ^U
Delete to beginning of command line.
@li ^V
Insert special character.
@li ^W
Erase word.

@h1 SEARCH MODE

Search pattern is an extended regular expression.

Same keys work as in command mode, plus these additional keys:

@li M-c
Toggle *case-sensitive-search* option.
@li M-r
Reverse search direction.

@h1 ENVIRONMENT

DTE_HOME
	User configuration directory. Defaults to ~/.dte if not set.

@h1 FILES

$DTE_HOME/rc
	Your personal configuration.

$DTE_HOME/syntax/\*
	Your personal syntax files. These override the syntax files that
	come with the program.

$DTE_HOME/file-locks
	Records open files to protect you from accidentally editing files
	opened in another process. Used only if *lock-files* is true.

$DTE_HOME/file-history
	Last edited files and cursor positions.

$DTE_HOME/command-history and $DTE_HOME/search-history
	Command and search history.

@h1 AUTHORS

Craig Barnes <cr\@igbarn.es>

Timo Hirvonen <tihirvon\@gmail.com>

@h1 SEE ALSO

dte-syntax(5)
