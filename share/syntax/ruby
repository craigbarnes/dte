syntax .ruby-esc

# This sub-syntax was copied from the Python syntax
# TODO: correct the rules to match the actual Ruby syntax

state esc special
    char "abfnrtv'\\\"" END special
    char 0-7 oct1
    char x hex0
    noeat END

state oct1 special
    char 0-7 oct2
    noeat END

state oct2 special
    char 0-7 END special
    noeat END

state hex0 special
    char 0-9a-fA-F hex1
    noeat END

state hex1 special
    char 0-9a-fA-F END special
    noeat END

syntax ruby

# TODO:
# * %Q() strings
# * Expression substitution in strings
# * Here document strings
# * Command output (e.g. `date` or %x{ date })
# * Regular expression literals
# * Numeric literals
# * Constants (e.g. FOOBAR)

state line-start code
    char # comment
    char " \b\t\n\v\f\r" line-start
    str "=begin" =begin
    noeat start

state start code
    char # comment
    char "\n" line-start
    char -b a-zA-Z_ ident
    char '"' dq
    char "'" sq
    char \$ global-variable
    char -b @ maybe-instance-variable
    char -b : maybe-symbol
    eat start

state global-variable
    char a-zA-Z0-9_- global-variable
    char !@&`\'+~=/\\,\;.<>\*\$\?:\" start global-variable
    noeat start

state maybe-instance-variable instance-variable
    char -b a-zA-Z_ instance-variable
    recolor code
    noeat start

state instance-variable
    char a-zA-Z0-9_ instance-variable
    noeat start

state maybe-symbol symbol
    char -b a-zA-Z_ symbol
    char -b : double-colon
    recolor code
    noeat start

state double-colon
    recolor double-colon
    noeat start

state symbol
    char a-zA-Z0-9_ symbol
    noeat start

state comment
    char "\n" line-start
    eat comment

state =begin comment
    char "\n" =begin-nl
    eat =begin

state =begin-nl comment
    char " \b\t\n\v\f\r" =begin-nl
    str "=end" comment
    noeat =begin

state ident
    char -b a-zA-Z0-9_ ident
    inlist keyword start
    inlist pseudo-variable start
    noeat start

state dq string
    char "\"" start string
    char "\n" line-start
    char -b "\\" .ruby-esc:dq
    eat dq

state sq string
    char "'" start string
    char "\n" line-start
    char -b "\\" .ruby-esc:sq
    eat sq

list keyword \
    __ENCODING__ __LINE__  __FILE__ __method__ __callee__ __dir__ BEGIN END \
    alias and begin break case class def defined? do else elsif end \
    ensure false for if in module next nil not or redo rescue retry \
    return self super then true undef unless until when while yield \
  
list pseudo-variable \
     at_exit attr attr_accessor attr_reader attr_writer \
     catch include lambda load loop private proc protected public \
     raise fail require throw

default numeric symbol
default constant pseudo-variable
default variable global-variable
default variable instance-variable
default operator double-colon
