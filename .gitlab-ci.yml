stages: [test, dist]

variables:
    GIT_FETCH_EXTRA_FLAGS: --tags

default:
    before_script:
        - export DEBUG=3 WERROR=1 V=1
        - make vars

.test:
    stage: test
    script:
        - export CC="ccache ${CC:-gcc}"
        - make
        - cat build/feature.h
        - ldd dte
        - make check-whitespace
        - make check
        - make clean && make check LDFLAGS=-static
        - ldd dte || true

        # Ensure build works with no detected features (test fallbacks)
        - echo > build/feature.h
        - make check
        - cat build/feature.h

        - make clean && make DEBUG=0 && make installcheck
        - strip dte && du -k -h dte
        - tools/objsize.sh dte
        - make bench DEBUG=0 CFLAGS=-O3

alpine:
    extends: .test
    image: registry.gitlab.com/craigbarnes/dockerfiles/cdev-alpine

arch:
    extends: .test
    image: registry.gitlab.com/craigbarnes/dockerfiles/cdev-arch

ubuntu:
    extends: .test
    image: registry.gitlab.com/craigbarnes/dockerfiles/cdev-ubuntu

rocky-8:
    extends: .test
    image: registry.gitlab.com/craigbarnes/dockerfiles/cdev-rocky-8

debian-9:
    extends: .test
    image: registry.gitlab.com/craigbarnes/dockerfiles/cdev-debian-9
    script:
        - make check
        - cat build/feature.h
        - make installcheck
        - make clean && make check CC='ccache gcc'
        - make clean && make check CC='ccache clang'
        - make clean && make CC='ccache arm-linux-gnueabihf-gcc'
        - make clean && make CC='ccache aarch64-linux-gnu-gcc'
        - export LDFLAGS=-static
        - make clean && make check CC='ccache gcc'
        - make clean && make check CC='ccache clang'
        - make clean && make CC='ccache arm-linux-gnueabihf-gcc'
        - make clean && make CC='ccache aarch64-linux-gnu-gcc'
        - make clean && make distcheck
        - make bench DEBUG=0 CFLAGS=-O3

debian-10:
    extends: debian-9
    image: registry.gitlab.com/craigbarnes/dockerfiles/cdev-debian-10

debian-11:
    extends: debian-9
    image: registry.gitlab.com/craigbarnes/dockerfiles/cdev-debian-11

android:
    extends: .test
    image: registry.gitlab.com/craigbarnes/dockerfiles/android-ndk
    script:
        - make clean && make CC="$CC_AARCH64"
        - cat build/feature.h
        - make clean && make CC="$CC_ARMV7A"
        - make clean && make CC="$CC_I686"
        - make clean && make CC="$CC_X86_64"

coverage:
    stage: test
    image: registry.gitlab.com/craigbarnes/dockerfiles/cdev-alpine
    artifacts:
        expire_in: 30 days
        name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
        reports:
            coverage_report:
                coverage_format: cobertura
                path: build/coverage.xml
    script:
        - make build/coverage.xml

.pages:
    stage: dist
    image: registry.gitlab.com/craigbarnes/dockerfiles/cdev-debian-11
    coverage: '/^ *lines\.*: *(\d+\.\d+\%) .*$/'
    artifacts:
        paths: [public]
        expire_in: 60 days
        name: dte-$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA
    script:
        - make docs
        - make coverage-report
        - make vars check CC=musl-gcc LDFLAGS=-static DEBUG=0 SANE_WCTYPE=1
        - strip dte
        - tools/objsize.sh dte
        - ldd dte || true
        - TARNAME="$(./dte -V | head -n1 | tr -- ' ' -)-linux-$(uname -m)"
        - tar -czf "public/$TARNAME.tar.gz" dte docs/dte.1 docs/dterc.5 docs/dte-syntax.5
        - ln -s "$TARNAME.tar.gz" public/dte-master-linux-$(uname -m).tar.gz
        - tree public/

pages:
    extends: .pages
    only: [master]

pages:non-master:
    extends: .pages
    except: [master]
