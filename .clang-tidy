# See also: .clang-tidy configs in src/util/ and test/.
# Note that Checks in child configs are additive with the parent config,
# whereas CheckOptions settings override parent config settings of the
# same name.

HeaderFilterRegex: .*

Checks: >
    clang-diagnostic-*,
    clang-analyzer-*,
    cert-*,
    bugprone-*,
    performance-*,
    portability-*,
    readability-*,
    misc-*,
    android-cloexec-*,
    cppcoreguidelines-avoid-non-const-global-variables,
    modernize-macro-to-enum,
    -clang-diagnostic-pointer-sign,
    -clang-diagnostic-sign-compare,
    -clang-analyzer-core.NonNullParamChecker,
    -clang-analyzer-optin.core.EnumCastOutOfRange,
    -clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,
    -clang-analyzer-unix.Malloc,
    -clang-analyzer-valist.Uninitialized,
    -cert-err33-c,
    -bugprone-easily-swappable-parameters,
    -bugprone-implicit-widening-of-multiplication-result,
    -bugprone-macro-parentheses,
    -bugprone-multi-level-implicit-pointer-conversion,
    -bugprone-narrowing-conversions,
    -bugprone-not-null-terminated-result,
    -bugprone-switch-missing-default-case,
    -readability-avoid-nested-conditional-operator,
    -readability-else-after-return,
    -readability-function-cognitive-complexity,
    -readability-identifier-length,
    -readability-isolate-declaration,
    -readability-magic-numbers,
    -readability-uppercase-literal-suffix,
    -performance-no-int-to-ptr,
    -misc-include-cleaner,

CheckOptions:
    readability-implicit-bool-conversion.AllowIntegerConditions: true
    readability-implicit-bool-conversion.AllowPointerConditions: true
    readability-simplify-boolean-expr.ChainedConditionalAssignment: true
    readability-simplify-boolean-expr.ChainedConditionalReturn: true
    readability-function-size.LineThreshold: '250'
    readability-function-size.StatementThreshold: '200'
    readability-function-size.NestingThreshold: '6'
    readability-function-size.ParameterThreshold: '6'
    readability-function-size.VariableThreshold: '32'
    bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression: true
    bugprone-sizeof-expression.WarnOnSizeOfPointer: true

    readability-identifier-naming.ConstantCase: lower_case
    readability-identifier-naming.EnumCase: CamelCase
    readability-identifier-naming.EnumConstantCase: UPPER_CASE
    readability-identifier-naming.EnumConstantIgnoredRegexp: '[a-z]'
    readability-identifier-naming.FunctionCase: lower_case
    readability-identifier-naming.FunctionIgnoredRegexp: '^[a-z][a-z_]+[a-z]_$'
    readability-identifier-naming.LocalVariableCase: lower_case
    readability-identifier-naming.LocalVariableIgnoredRegexp: '[A-Z]'
    readability-identifier-naming.MacroDefinitionCase: aNy_CasE
    readability-identifier-naming.MemberCase: lower_case
    readability-identifier-naming.ParameterCase: lower_case
    readability-identifier-naming.ParameterIgnoredRegexp: '[A-Z]'
    readability-identifier-naming.StructCase: CamelCase
    readability-identifier-naming.StructIgnoredRegexp: '^(cconv|llmap)$'
    readability-identifier-naming.TypedefCase: CamelCase
    readability-identifier-naming.UnionCase: CamelCase
    readability-identifier-naming.VariableCase: lower_case

    # Note that this configuration produces warnings like "side effect in
    # BUG_ON() condition discarded in release builds", but that message isn't
    # actually accurate with our usage. The BUG_ON() condition is never
    # discarded and we're simply using this check to restrict function calls
    # to a small list that are either known to be eliminated as dead code or
    # prevented from running in release builds through some other means (e.g.
    # ifdef or early return). See the definition of BUG() for more context.
    bugprone-assert-side-effect.AssertMacros: BUG_ON
    bugprone-assert-side-effect.CheckFunctionCalls: true
    bugprone-assert-side-effect.IgnoredFunctions: >
        block_iter_is_bol;
        block_iter_is_eof;
        buffer_contains_block;
        color_is_rgb;
        color_is_valid;
        cond_type_has_destination;
        count_nl;
        cursor_color_is_valid;
        cursor_type_is_valid;
        has_flag;
        is_newly_detected_feature;
        is_root_frame;
        is_valid_filetype_name;
        list_empty;
        log_level_enabled;
        mem_equal;
        obuf_avail;
        path_is_absolute;
        strview_has_prefix;
        strview_has_suffix;
        strview_has_sv_prefix;

    # https://clang.llvm.org/extra/clang-tidy/checks/bugprone/unused-return-value.html
    bugprone-unused-return-value.CheckedReturnTypes: ^(ExitCode|String|SystemErrno)$
    bugprone-unused-return-value.AllowCastToVoid: true
    bugprone-unused-return-value.CheckedFunctions: >
        ^(fd)?opendir$;
        ^(f|fd|fre)open$;
        ^(m|c|re)alloc$;
        ^clock_gettime$;
        ^m(un)?map$;
        ^mkdir(at)?$;
        ^open(at)?$;
        ^p?(read|write)v?$;
        ^reg(comp|exec)$;
        ^remove$;
        ^rename$;
        ^setlocale$;
        ^strftime$;

    # https://clang.llvm.org/extra/clang-tidy/checks/bugprone/unsafe-functions.html#custom-functions
    bugprone-unsafe-functions.ReportDefaultFunctions: false
    bugprone-unsafe-functions.CustomFunctions: >
        ^strn?(cpy|cat)$,memccpy,is flawed (see https://nullprogram.com/blog/2023/02/11/#strings:~:text=no%20legitimate%20uses);
        ^strl(cpy|cat)$,memccpy,is flawed (see https://nullprogram.com/blog/2023/02/11/#strings:~:text=functions%20like%20strlcpy);
        scanf$,src/util/strtonum.h,is flawed (see https://nullprogram.com/blog/2023/02/11/#stdio:~:text=don%E2%80%99t%20ever%20bother%20with%20scanf);
        ^(atoi|atol|atoll)$,src/util/strtonum.h,is broken (see "BUGS" in atoi(3));
        ^strto(u?ll?|[iu](max)?)$,src/util/strtonum.h,is locale-dependant;
        ^(atof|strto(f|d|ld))$,integers,returns a floating-point type;
        ^mktemp$,xmkstemp_cloexec,is broken (see "BUGS" in mktemp(3));
        ^(tmpfile|tempnam|tmpnam)$,xmkstemp_cloexec,is flawed;
        ^mkstemp$,xmkstemp_cloexec,doesn't set O_CLOEXEC flag and needs EINTR handling;
        ^mkostemp$,xmkstemp_cloexec,needs EINTR handling and is a recent POSIX addition (issue 8, 2024);
        ^va_arg$,fixed parameters,is error prone and inefficient;
        ^open$,xopen,needs EINTR handling;
        ^read$,xread,needs EINTR handling;
        ^write$,xwrite,needs EINTR handling;
        ^close$,xclose,needs EINTR/EINPROGRESS handling and may clobber errno(3) on success;
        ^opendir$,xopendir,needs EINTR handling;
        ^readdir$,xreaddir,needs EINTR handling;
        ^readdir_r$,xreaddir,is obsolete;
        ^closedir$,xclosedir;
        ^fopen$,xfopen,needs EINTR/O_CLOEXEC/umask handling;
        ^calloc$,xcalloc,needs explicit ENOMEM and arithmetic overflow handling;
        ^reallocarray$,xreallocarray,needs explicit ENOMEM handling and is a recent POSIX addition (issue 8, 2024);
        ^asprintf$,xasprintf,needs explicit ENOMEM/EOVERFLOW/EILSEQ handling and isn't specified by POSIX;
        ^vasprintf$,xvasprintf,needs explicit ENOMEM/EOVERFLOW/EILSEQ handling and isn't specified by POSIX;
        ^strdup$,xstrdup,needs explicit ENOMEM handling;
        ^strndup$,a different function,is a code smell;
        ^mempcpy$,xmempcpy,is non-portable (non-POSIX);
        ^memrchr$,xmemrchr,is non-portable (non-POSIX);
        ^memmem$,xmemmem,is a recent POSIX addition (issue 8, 2024);
        ^dup3$,xdup3,is a recent POSIX addition (issue 8, 2024);
        ^pipe2$,xpipe2,is a recent POSIX addition (issue 8, 2024);
        ^fsync$,xfsync,is optional in POSIX;
        ^posix_madvise$,advise_sequential,is optional in POSIX;
        ^signal$,sigaction,is obsolete;
        ^tow?(lower|upper)$,,is locale-dependant;
        ^isw?(alnum|alpha|blank|cntrl|x?digit|graph|lower|print|punct|space|upper)$,,is locale-dependant;

    # https://clang.llvm.org/extra/clang-tidy/checks/llvmlibc/restrict-system-libc-headers.html#cmdoption-arg-Includes
    portability-restrict-system-includes.Includes: >
        -*,
        dirent.h,
        errno.h,
        fcntl.h,
        glob.h,
        iconv.h,
        inttypes.h,
        langinfo.h,
        limits.h,
        locale.h,
        poll.h,
        regex.h,
        signal.h,
        stdarg.h,
        stdbit.h,
        stdbool.h,
        stddef.h,
        stdint.h,
        stdio.h,
        stdlib.h,
        string.h,
        sys/ioctl.h,
        sys/mman.h,
        sys/stat.h,
        sys/types.h,
        sys/utsname.h,
        sys/wait.h,
        termios.h,
        time.h,
        unistd.h,
        sanitizer/asan_interface.h,
