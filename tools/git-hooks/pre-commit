#!/bin/sh

# This pre-commit hook creates a fresh, temporary checkout of the index
# (i.e. not including unstaged/dirty changes from the working tree)
# and then performs a full build.

export POSIXLY_CORRECT=1
TMPDIR='.pre-commit-test'
PROGNAME="$0"

error() {
    echo "$PROGNAME:$1: Error: $2" >&2
    exit 1
}

alias abort='error "${LINENO:-1}"'
set -u

for cmd in git gcc clang ccache awk pandoc mkdir cp basename diff; do
    if ! command -v "$cmd" >/dev/null; then
        abort "'$cmd' is required but couldn't be found"
    fi
done

test ! -e "$TMPDIR" || abort "path '$TMPDIR' already exists"

MAKE="$(command -v gmake || command -v make)"
test -x "$MAKE" || abort 'unable to find GNU Make command'
MAKE="$MAKE --no-print-directory -C $TMPDIR -j$(mk/nproc.sh)"
export MAKEFLAGS='DEBUG=3 WERROR=1'
export CFLAGS='-g -Og -pipe'

set -e
git checkout-index --prefix="$TMPDIR/" -a
trap "rm -rf '$TMPDIR'" EXIT HUP INT QUIT TERM

# Generated files that are checked into the repository have an "is-generated"
# attribute (set via .gitattributes):
generated=$(git ls-files --format="$TMPDIR/%(path)" --error-unmatch ':(attr:is-generated)')

# ...snapshot and re-generate these files:
mkdir -p "$TMPDIR/GEN/"
# shellcheck disable=SC2086
cp $generated "$TMPDIR/GEN/"
$MAKE -B man

# ...and then check the freshly generated files are identical to the
# ones that are to be committed:
for file in $generated; do
    base=$(basename "$file")
    orig="$TMPDIR/GEN/$base"
    echo "   CHECK  $orig"
    if ! diff "$file" "$orig" >/dev/null; then
        # shellcheck disable=SC2295
        abort "re-generate '${file##${TMPDIR}/}' before committing"
    fi
done

# Build and test with various configurations and compilers:
for CC in gcc clang; do
    export CC="ccache $CC"
    $MAKE check
    $MAKE check ICONV_DISABLE=1
    $MAKE check DEBUG=0
done
