#!/bin/sh

# This pre-commit hook creates a fresh, temporary checkout of the index
# (i.e. not including unstaged/dirty changes from the working tree)
# and then performs various checks, depending on what changed.

export POSIXLY_CORRECT=1
TMPDIR='.pre-commit-test'
PROGNAME="$0"

error() {
    echo "$PROGNAME:$1: Error: $2" >&2
    exit 1
}

changed_files() {
    git diff-index --cached --name-only --diff-filter=ACMR HEAD -- "$@"
}

git_ls() {
    git ls-files --error-unmatch "$@"
}

alias abort='error "${LINENO:-1}"'
set -u

for cmd in git gcc clang ccache awk pandoc mkdir cp basename diff; do
    if ! command -v "$cmd" >/dev/null; then
        abort "'$cmd' is required but couldn't be found"
    fi
done

test ! -e "$TMPDIR" || abort "path '$TMPDIR' already exists"

MAKE="$(command -v gmake || command -v make)"
test -x "$MAKE" || abort 'unable to find GNU Make command'
MAKE="$MAKE --no-print-directory -C $TMPDIR -j$(mk/nproc.sh)"

set -e
git checkout-index --prefix="$TMPDIR/" -a
trap "rm -rf '$TMPDIR'" EXIT HUP INT QUIT TERM

changed_doc_regen_files=$(changed_files ':(attr:change-triggers-doc-regen-check)')

if test "$changed_doc_regen_files"; then
    # Snapshot and re-generate man pages, if any Markdown sources
    # (or `make man` dependencies) were changed
    manpages=$(git_ls --format="$TMPDIR/%(path)" -- 'docs/dte*.[15]')
    mkdir -p "$TMPDIR/GEN/"
    cp $manpages "$TMPDIR/GEN/"
    $MAKE -B man

    # ...then check that the freshly generated files are identical to the
    # ones to be committed
    for file in $manpages; do
        base=$(basename "$file")
        orig="$TMPDIR/GEN/$base"
        echo "   CHECK  $orig"
        if ! diff "$file" "$orig" >/dev/null; then
            # shellcheck disable=SC2295
            abort "re-generate '${file##${TMPDIR}/}' before committing (run 'make man')"
        fi
    done
fi

changed_indented_files=$(changed_files ':(attr:space-indent)')
changed_shell_files=$(changed_files ':(attr:shell)')
changed_c_files=$(changed_files '**.[ch]')
changed_make_files=$(changed_files ':(attr:make)')
changed_full_check_files=$(changed_files ':(attr:change-triggers-full-check)')
changed_basic_check_files=$(changed_files ':(attr:change-triggers-basic-check)')

# Check for whitespace errors in changed files (if applicable)
if test "$changed_indented_files"; then
    tools/wscheck.awk $changed_indented_files
fi

# Run shellcheck(1) on changed shell scripts
if test "$changed_shell_files"; then
    shellcheck -fgcc $changed_shell_files
fi

# Check for header-related errors in changed C files
if test "$changed_c_files"; then
    tools/hdrcheck.awk $changed_c_files
fi

# Check for lint in changed makefiles
if test "$changed_make_files"; then
    tools/mkcheck.awk $changed_make_files
fi

if test "$changed_full_check_files"; then
    # Build and test with various configurations and compilers:
    export CFLAGS='-g -Og -pipe -Werror'
    export DEBUG=3
    for compiler in gcc clang; do
        export CC="ccache $compiler"
        $MAKE check
        $MAKE check ICONV_DISABLE=1
        $MAKE check DEBUG=0
    done
elif test "$changed_basic_check_files"; then
    # If the code and build system weren't changed but syntax files were,
    # run a single `make check` to ensure test_builtin_configs() passes
    $MAKE check CC='ccache gcc' CFLAGS='-g -Og -pipe -Werror' DEBUG=3
fi
