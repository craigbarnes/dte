#!/bin/sh
# The output of this script is used to generate build/gen/compiler.mk
# shellcheck disable=SC2086,SC2116,SC2310

set -eu
CC="$1"

# The following compiler options are divided into "sets", which are
# tested all at once, in order to keep process spawning overhead to
# a minimum (i.e. as compared to iterating through and checking them
# individually)

# https://gcc.gnu.org/onlinedocs/gcc-4.8.5/gcc/Warning-Options.html
# https://releases.llvm.org/7.0.0/tools/clang/docs/DiagnosticsReference.html
GCC_4_8_WARNINGS='
    -Wall -Wextra -Wformat -Wformat-security -Wformat-nonliteral
    -Wmissing-prototypes -Wstrict-prototypes -Wwrite-strings
    -Wundef -Wshadow -Wcast-align -Wredundant-decls -Wswitch-enum
    -Wvla -Wold-style-definition -Wframe-larger-than=32768
    -Wpointer-arith -Wnested-externs -Winit-self -Wbad-function-cast
    -Werror=div-by-zero -Werror=implicit-function-declaration
    -Wno-sign-compare -Wno-pointer-sign
'

# https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Warning-Options.html
GCC_14_WARNINGS='
    -Walloca -Walloc-zero -Wnull-dereference -Wformat-signedness
    -Wstringop-truncation -Wstringop-overflow -Wshift-overflow=2
    -Wcast-align=strict -Wduplicated-branches -Wduplicated-cond
    -Wlogical-op -Wmissing-noreturn -Wdate-time -Wtrampolines
'

# https://gcc.gnu.org/gcc-15/changes.html#c-family
GCC_15_WARNINGS='
    -Wleading-whitespace=spaces -Wtrailing-whitespace=any
'

# https://releases.llvm.org/18.1.8/tools/clang/docs/DiagnosticsReference.html
CLANG_18_WARNINGS='
    -Walloca -Wnull-dereference -Wcomma -Wmissing-noreturn -Wdate-time
'

SANITIZER_FLAGS='
    -fsanitize=address,undefined -fsanitize-address-use-after-scope
    -fno-sanitize-recover=all -fno-omit-frame-pointer -fno-common
'

cc_option() {
    $CC "$@" -Werror -c -o /dev/null mk/feature-test/basic.c
}

fmt_cflags() {
    echo "$1" | sed -E '/^$/d; s/^ */BASIC_CFLAGS += /'
}

echo '# Generated by mk/compiler.sh; do not edit'

if cc_option -std=gnu23; then
    echo 'BASIC_CFLAGS += -std=gnu23'
else
    echo 'BASIC_CFLAGS += -std=gnu11'
fi

if cc_option -fvisibility=hidden; then
    echo 'BASIC_CFLAGS += -fvisibility=hidden'
fi

# https://gcc.gnu.org/onlinedocs/gcc/C-Dialect-Options.html#index-fstrict-flex-arrays
# https://gcc.gnu.org/gcc-13/changes.html#c-family
# https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-fstrict-flex-arrays
if cc_option -fstrict-flex-arrays; then
    echo 'BASIC_CFLAGS += -fstrict-flex-arrays'
fi

# https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstrict-flex-arrays
# (available since GCC 13 but not in the release notes, unlike -fstrict-flex-arrays)
if cc_option -Wstrict-flex-arrays; then
    echo 'BASIC_CFLAGS += -Wstrict-flex-arrays'
fi

if cc_option $GCC_4_8_WARNINGS; then
    fmt_cflags "$GCC_4_8_WARNINGS"
fi

if cc_option $GCC_14_WARNINGS; then
    fmt_cflags "$GCC_14_WARNINGS"
elif cc_option $CLANG_18_WARNINGS; then
    fmt_cflags "$CLANG_18_WARNINGS"
fi

if cc_option $GCC_15_WARNINGS; then
    fmt_cflags "$GCC_15_WARNINGS"
fi

if cc_option -MMD -MP -MF /dev/null; then
    echo 'DEPFLAGS = -MMD -MP -MF $(@:.o=.mk)'
elif cc-option -MD -MF /dev/null; then
    echo 'DEPFLAGS = -MD -MF $(@:.o=.mk)'
fi

if cc_option -fno-asynchronous-unwind-tables; then
    echo "NO_UNWIND_TABLES = -fno-asynchronous-unwind-tables"
fi

# $(echo ...) is used here to remove newlines and extra spaces
SANITIZER_FLAGS="$(echo $SANITIZER_FLAGS)"

if cc_option $SANITIZER_FLAGS; then
    echo "CC_SANITIZER_FLAGS = $SANITIZER_FLAGS"
fi
