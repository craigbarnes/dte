#!/bin/sh
# The output of this script is used to generate build/gen/platform.mk

set -u
KERNEL="$(uname -s)"
NPROC="$(mk/nproc.sh)"

echo "# Generated by mk/platform.sh; do not edit
KERNEL = ${KERNEL:-unknown}
NPROC = ${NPROC:-1}"

# Check for `xargs -P` (parallel execution) support
# See also: https://www.austingroupbugs.net/view.php?id=1801
if test "$NPROC" -gt 1 && printf "1\n2" | xargs -P2 -I@ echo '@' >/dev/null; then
    echo "XARGS_P = xargs -P$NPROC"
else
    echo 'XARGS_P = xargs'
fi

# The use of $(CC_TARGET) here means that `include build/gen/compiler.mk`
# MUST come before `include build/gen/platform.mk` (see `mk/prelude.mk`)
condvars() {
    printf '\nifeq "" "$(CC_TARGET)"\n'
    printf '%s' "$1" | sed -E "/^ *\$/d; s/^ */ /"
    printf 'endif'
}

# These fallbacks are only used if $(CC_TARGET) can't be determined
case "$KERNEL" in
Linux)
    OS="$(uname -o)"
    if test "$OS" = Android; then
        condvars '
            LDLIBS_ICONV = -liconv
            NO_INSTALL_XDG_CLUTTER = 1
        '
    fi ;;
Darwin)
    condvars '
        LDLIBS_ICONV = -liconv
        NO_INSTALL_XDG_CLUTTER = 1
    ' ;;
OpenBSD)
    condvars '
        LDLIBS_ICONV = -liconv
        BASIC_CPPFLAGS += -I/usr/local/include
        BASIC_LDFLAGS += -L/usr/local/lib
    ' ;;
NetBSD)
    condvars '
        BASIC_CPPFLAGS += -I/usr/pkg/include
        BASIC_LDFLAGS += -L/usr/pkg/lib
    ' ;;
CYGWIN*)
    condvars '
        LDLIBS_ICONV = -liconv
        EXEC_SUFFIX = .exe
    ' ;;
esac
