syntax .zig-esc

# TODO: \xNN  \u{...}
state esc special
    char "nrt'\\\"" END special
    noeat END

syntax .zig-string

state string
    char '"' END string
    char "\n" END error
    char "\\" .zig-esc:this
    eat this

syntax zig

# https://ziglang.org/documentation/master/#Grammar
state start code
    char -b iu maybe-int-type
    char -b a-z_@ ident
    char -b A-Z ident-upper
#    char 0 zero
#    char 1-9 dec
    char \" .zig-string:this
    str '\\' string-multi
#    char \' .c-char:this
    str '//' comment
    eat this

state ident
    char -b a-zA-Z0-9_ this
    inlist keyword start
    inlist type start
    inlist constant start
    inlist builtin start
    noeat start

state ident-upper ident
    char -b a-z class-name-start
    char -b A-Z0-9_ ident
    noeat start

state class-name-start
    recolor class-name
    noeat class-name

state class-name
    char a-zA-Z0-9_ this
    noeat start

state maybe-int-type type
    char 1-9 int-type
    recolor ident 1
    noeat -b ident

state int-type type
    char 0-9 this
    noeat start

state comment
    char "\n" start
    eat this

state string-multi string
    char "\n" start
    eat this


list keyword \
    addrspace align allowzero and anyframe anytype asm async await \
    break callconv catch comptime const continue defer else enum \
    errdefer error export extern fn for if inline linksection \
    noalias noinline nosuspend opaque or orelse packed pub resume \
    return struct suspend switch test threadlocal try union \
    unreachable usingnamespace var volatile while

# https://ziglang.org/documentation/master/#Primitive-Types
list type \
    anyerror anyopaque bool c_char c_int c_long c_longdouble \
    c_longlong c_short c_uint c_ulong c_ulonglong c_ushort \
    comptime_float comptime_int f128 f16 f32 f64 f80 i128 i16 i32 \
    i64 i8 isize noreturn type u128 u16 u32 u64 u8 usize void

list constant \
    null undefined true false

# https://ziglang.org/documentation/master/#Builtin-Functions
list builtin \
    @This @Type @TypeOf @Vector @abs @addWithOverflow @addrSpaceCast \
    @alignCast @alignOf @as @atomicLoad @atomicRmw @atomicStore \
    @bitCast @bitOffsetOf @bitReverse @bitSizeOf @breakpoint \
    @byteSwap @cDefine @cImport @cInclude @cUndef @cVaArg @cVaCopy \
    @cVaEnd @cVaStart @call @ceil @clz @cmpxchgStrong @cmpxchgWeak \
    @compileError @compileLog @constCast @cos @ctz @divExact \
    @divFloor @divTrunc @embedFile @enumFromInt @errorCast \
    @errorFromInt @errorName @errorReturnTrace @exp @exp2 @export \
    @extern @fence @field @fieldParentPtr @floatCast @floatFromInt \
    @floor @frameAddress @hasDecl @hasField @import @inComptime \
    @intCast @intFromBool @intFromEnum @intFromError @intFromFloat \
    @intFromPtr @log @log10 @log2 @max @memcpy @memset @min @mod \
    @mulAdd @mulWithOverflow @offsetOf @panic @popCount @prefetch \
    @ptrCast @ptrFromInt @reduce @rem @returnAddress @round @select \
    @setAlignStack @setCold @setEvalBranchQuota @setFloatMode \
    @setRuntimeSafety @shlExact @shlWithOverflow @shrExact @shuffle \
    @sin @sizeOf @splat @sqrt @src @subWithOverflow @tagName @tan \
    @trap @trunc @truncate @typeInfo @typeName @unionInit \
    @volatileCast @wasmMemoryGrow @wasmMemorySize @workGroupId \
    @workGroupSize @workItemId
